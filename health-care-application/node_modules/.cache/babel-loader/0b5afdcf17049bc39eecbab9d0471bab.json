{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Newli\\\\Desktop\\\\HealthCareProject\\\\health-care-application\\\\src\\\\components\\\\validation\\\\validation.js\";\nimport React, { Component } from 'react'; //import { FormErrors } from './FormErrors';\n\nimport { Container, Form, Button, Col, FormControl, ButtonToolbar } from \"react-bootstrap\";\nconst validationRules = {\n  required: val => val !== null && val !== undefined && val !== \"\",\n  phone: phone => {\n    const re = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\n    return re.test(String(phone));\n  },\n  email: email => {\n    const re = /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/;\n    return re.test(String(email).toLowerCase());\n  }\n};\n\nclass Validation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFieldChange = e => {\n      let newState = { ...this.state\n      };\n      newState[e.target.name].value = e.target.value;\n      this.validateForm(newState);\n    };\n\n    this.handleSetTouched = e => {\n      let field = { ...this.state[e.target.name],\n        isTouched: true\n      };\n      this.setState({\n        [e.target.name]: { ...field\n        }\n      });\n    };\n\n    this.getClassName = fieldName => {\n      const field = this.state[fieldName];\n      return field.isTouched && !field.isValid ? \"has-error\" : \"\";\n    };\n\n    this.validateForm = newState => {\n      newState = newState || { ...this.state\n      };\n      this.fields.forEach(fieldName => {\n        let newField = newState[fieldName];\n        newField.errors = [];\n        newField.isValid = true;\n        this.formValidationRules[fieldName].forEach(vRule => {\n          if (!vRule.rule(this.state[fieldName].value)) {\n            newField.errors.push(vRule.message);\n            newField.isValid = false;\n          }\n\n          newState[fieldName] = newField;\n        });\n      });\n      this.setState(newState);\n    };\n\n    this.formValidationRules = {\n      firstName: [{\n        rule: validationRules.required,\n        message: \"First name is required\"\n      }],\n      lastName: [{\n        rule: validationRules.required,\n        message: \"Last name is required\"\n      }],\n      phone: [{\n        rule: validationRules.phone,\n        message: \"Phone number is invalid\"\n      }],\n      email: [{\n        rule: validationRules.required,\n        message: \"Email is required\"\n      }, {\n        rule: validationRules.email,\n        message: \"Email is invalid\"\n      }]\n    };\n    this.fields = [\"firstName\", \"lastName\", \"phone\", \"email\"];\n    this.state = {\n      signupForm: {\n        isValid: false\n      },\n      firstName: {\n        value: \"\",\n        isTouched: false,\n        isValid: false,\n        errors: []\n      },\n      lastName: {\n        value: \"\",\n        isTouched: false,\n        isValid: false,\n        errors: []\n      },\n      phone: {\n        value: \"\",\n        isTouched: false,\n        isValid: false,\n        errors: []\n      },\n      email: {\n        value: \"\",\n        isTouched: false,\n        isValid: false,\n        errors: []\n      }\n    };\n  }\n\n  componentWillMount() {\n    this.validateForm();\n  }\n\n  render() {\n    const {\n      firstName,\n      lastName,\n      phone,\n      email\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, \"\\u0E1A\\u0E31\\u0E15\\u0E23\\u0E1B\\u0E23\\u0E30\\u0E0A\\u0E32\\u0E0A\\u0E19\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: phone.isTouched && !phone.isValid ? \"has-error\" : \"\",\n      name: \"phone\",\n      value: this.state.phone.value,\n      onChange: this.handleFieldChange,\n      onBlur: this.handleSetTouched,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }), phone.isTouched && phone.errors.length > 0 && phone.errors.map((err, i) => /*#__PURE__*/React.createElement(\"span\", {\n      key: i,\n      className: \"error-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, err))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: email.isTouched && !email.isValid ? \"has-error\" : \"\",\n      name: \"email\",\n      value: this.state.email.value,\n      onChange: this.handleFieldChange,\n      onBlur: this.handleSetTouched,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }), email.isTouched && email.errors.length > 0 && email.errors.map((err, i) => /*#__PURE__*/React.createElement(\"span\", {\n      key: i,\n      className: \"error-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, err))));\n  }\n\n} // export default FormValidator;\n\n\nexport default Validation;","map":{"version":3,"sources":["C:/Users/Newli/Desktop/HealthCareProject/health-care-application/src/components/validation/validation.js"],"names":["React","Component","Container","Form","Button","Col","FormControl","ButtonToolbar","validationRules","required","val","undefined","phone","re","test","String","email","toLowerCase","Validation","constructor","props","handleFieldChange","e","newState","state","target","name","value","validateForm","handleSetTouched","field","isTouched","setState","getClassName","fieldName","isValid","fields","forEach","newField","errors","formValidationRules","vRule","rule","push","message","firstName","lastName","signupForm","componentWillMount","render","length","map","err","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SACEC,SADF,EAEEC,IAFF,EAGEC,MAHF,EAIEC,GAJF,EAKEC,WALF,EAMEC,aANF,QAOO,iBAPP;AASC,MAAMC,eAAe,GAAG;AACrBC,EAAAA,QAAQ,EAAEC,GAAG,IAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKC,SAAxB,IAAqCD,GAAG,KAAK,EADzC;AAErBE,EAAAA,KAAK,EAAEA,KAAK,IAAI;AACd,UAAMC,EAAE,GAAG,qDAAX;AACA,WAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACH,KAAD,CAAd,CAAP;AACD,GALoB;AAMrBI,EAAAA,KAAK,EAAEA,KAAK,IAAI;AACd,UAAMH,EAAE,GAAG,gSAAX;AACA,WAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACC,KAAD,CAAN,CAAcC,WAAd,EAAR,CAAP;AACD;AAToB,CAAxB;;AAWD,MAAMC,UAAN,SAAyBjB,SAAzB,CAAmC;AAC/BkB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA8BnBC,iBA9BmB,GA8BCC,CAAC,IAAI;AACvB,UAAIC,QAAQ,GAAG,EAAE,GAAG,KAAKC;AAAV,OAAf;AACAD,MAAAA,QAAQ,CAACD,CAAC,CAACG,MAAF,CAASC,IAAV,CAAR,CAAwBC,KAAxB,GAAgCL,CAAC,CAACG,MAAF,CAASE,KAAzC;AACA,WAAKC,YAAL,CAAkBL,QAAlB;AACD,KAlCkB;;AAAA,SAoCnBM,gBApCmB,GAoCAP,CAAC,IAAI;AACtB,UAAIQ,KAAK,GAAG,EAAE,GAAG,KAAKN,KAAL,CAAWF,CAAC,CAACG,MAAF,CAASC,IAApB,CAAL;AAAgCK,QAAAA,SAAS,EAAE;AAA3C,OAAZ;AACA,WAAKC,QAAL,CAAc;AAAE,SAACV,CAAC,CAACG,MAAF,CAASC,IAAV,GAAiB,EAAE,GAAGI;AAAL;AAAnB,OAAd;AACD,KAvCkB;;AAAA,SAyCnBG,YAzCmB,GAyCJC,SAAS,IAAI;AAC1B,YAAMJ,KAAK,GAAG,KAAKN,KAAL,CAAWU,SAAX,CAAd;AACA,aAAOJ,KAAK,CAACC,SAAN,IAAmB,CAACD,KAAK,CAACK,OAA1B,GAAoC,WAApC,GAAkD,EAAzD;AACD,KA5CkB;;AAAA,SA8CnBP,YA9CmB,GA8CJL,QAAQ,IAAI;AACzBA,MAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAE,GAAG,KAAKC;AAAV,OAAvB;AACA,WAAKY,MAAL,CAAYC,OAAZ,CAAoBH,SAAS,IAAI;AAC/B,YAAII,QAAQ,GAAGf,QAAQ,CAACW,SAAD,CAAvB;AACAI,QAAAA,QAAQ,CAACC,MAAT,GAAkB,EAAlB;AACAD,QAAAA,QAAQ,CAACH,OAAT,GAAmB,IAAnB;AACA,aAAKK,mBAAL,CAAyBN,SAAzB,EAAoCG,OAApC,CAA4CI,KAAK,IAAI;AACnD,cAAI,CAACA,KAAK,CAACC,IAAN,CAAW,KAAKlB,KAAL,CAAWU,SAAX,EAAsBP,KAAjC,CAAL,EAA8C;AAC5CW,YAAAA,QAAQ,CAACC,MAAT,CAAgBI,IAAhB,CAAqBF,KAAK,CAACG,OAA3B;AACAN,YAAAA,QAAQ,CAACH,OAAT,GAAmB,KAAnB;AACD;;AACDZ,UAAAA,QAAQ,CAACW,SAAD,CAAR,GAAsBI,QAAtB;AACD,SAND;AAOD,OAXD;AAYA,WAAKN,QAAL,CAAcT,QAAd;AACD,KA7DkB;;AAGjB,SAAKiB,mBAAL,GAA2B;AACzBK,MAAAA,SAAS,EAAE,CACT;AAAEH,QAAAA,IAAI,EAAElC,eAAe,CAACC,QAAxB;AAAkCmC,QAAAA,OAAO,EAAE;AAA3C,OADS,CADc;AAIzBE,MAAAA,QAAQ,EAAE,CACR;AAAEJ,QAAAA,IAAI,EAAElC,eAAe,CAACC,QAAxB;AAAkCmC,QAAAA,OAAO,EAAE;AAA3C,OADQ,CAJe;AAOzBhC,MAAAA,KAAK,EAAE,CACL;AAAE8B,QAAAA,IAAI,EAAElC,eAAe,CAACI,KAAxB;AAA+BgC,QAAAA,OAAO,EAAE;AAAxC,OADK,CAPkB;AAUzB5B,MAAAA,KAAK,EAAE,CACL;AAAE0B,QAAAA,IAAI,EAAElC,eAAe,CAACC,QAAxB;AAAkCmC,QAAAA,OAAO,EAAE;AAA3C,OADK,EAEL;AAAEF,QAAAA,IAAI,EAAElC,eAAe,CAACQ,KAAxB;AAA+B4B,QAAAA,OAAO,EAAE;AAAxC,OAFK;AAVkB,KAA3B;AAgBA,SAAKR,MAAL,GAAc,CAAC,WAAD,EAAc,UAAd,EAA0B,OAA1B,EAAmC,OAAnC,CAAd;AAEA,SAAKZ,KAAL,GAAa;AACXuB,MAAAA,UAAU,EAAE;AAAEZ,QAAAA,OAAO,EAAE;AAAX,OADD;AAEXU,MAAAA,SAAS,EAAE;AAAElB,QAAAA,KAAK,EAAE,EAAT;AAAaI,QAAAA,SAAS,EAAE,KAAxB;AAA+BI,QAAAA,OAAO,EAAE,KAAxC;AAA+CI,QAAAA,MAAM,EAAE;AAAvD,OAFA;AAGXO,MAAAA,QAAQ,EAAE;AAAEnB,QAAAA,KAAK,EAAE,EAAT;AAAaI,QAAAA,SAAS,EAAE,KAAxB;AAA+BI,QAAAA,OAAO,EAAE,KAAxC;AAA+CI,QAAAA,MAAM,EAAE;AAAvD,OAHC;AAIX3B,MAAAA,KAAK,EAAE;AAAEe,QAAAA,KAAK,EAAE,EAAT;AAAaI,QAAAA,SAAS,EAAE,KAAxB;AAA+BI,QAAAA,OAAO,EAAE,KAAxC;AAA+CI,QAAAA,MAAM,EAAE;AAAvD,OAJI;AAKXvB,MAAAA,KAAK,EAAE;AAAEW,QAAAA,KAAK,EAAE,EAAT;AAAaI,QAAAA,SAAS,EAAE,KAAxB;AAA+BI,QAAAA,OAAO,EAAE,KAAxC;AAA+CI,QAAAA,MAAM,EAAE;AAAvD;AALI,KAAb;AAOD;;AAmCDS,EAAAA,kBAAkB,GAAG;AACnB,SAAKpB,YAAL;AACD;;AACDqB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEJ,MAAAA,SAAF;AAAaC,MAAAA,QAAb;AAAuBlC,MAAAA,KAAvB;AAA8BI,MAAAA;AAA9B,QAAwC,KAAKQ,KAAnD;AACA,wBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EADF,eAEE;AACE,MAAA,SAAS,EAAEZ,KAAK,CAACmB,SAAN,IAAmB,CAACnB,KAAK,CAACuB,OAA1B,GAAoC,WAApC,GAAkD,EAD/D;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,KAAK,EAAE,KAAKX,KAAL,CAAWZ,KAAX,CAAiBe,KAH1B;AAIE,MAAA,QAAQ,EAAE,KAAKN,iBAJjB;AAKE,MAAA,MAAM,EAAE,KAAKQ,gBALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EASGjB,KAAK,CAACmB,SAAN,IACCnB,KAAK,CAAC2B,MAAN,CAAaW,MAAb,GAAsB,CADvB,IAECtC,KAAK,CAAC2B,MAAN,CAAaY,GAAb,CAAiB,CAACC,GAAD,EAAMC,CAAN,kBACf;AAAM,MAAA,GAAG,EAAEA,CAAX;AAAc,MAAA,SAAS,EAAC,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,GADH,CADF,CAXJ,CADF,eAkBE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AACE,MAAA,SAAS,EAAEpC,KAAK,CAACe,SAAN,IAAmB,CAACf,KAAK,CAACmB,OAA1B,GAAoC,WAApC,GAAkD,EAD/D;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,KAAK,EAAE,KAAKX,KAAL,CAAWR,KAAX,CAAiBW,KAH1B;AAIE,MAAA,QAAQ,EAAE,KAAKN,iBAJjB;AAKE,MAAA,MAAM,EAAE,KAAKQ,gBALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EASGb,KAAK,CAACe,SAAN,IACCf,KAAK,CAACuB,MAAN,CAAaW,MAAb,GAAsB,CADvB,IAEClC,KAAK,CAACuB,MAAN,CAAaY,GAAb,CAAiB,CAACC,GAAD,EAAMC,CAAN,kBACf;AAAM,MAAA,GAAG,EAAEA,CAAX;AAAc,MAAA,SAAS,EAAC,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,GADH,CADF,CAXJ,CAlBF,CADF;AAsCD;;AA3G8B,C,CA8GlC;;;AACD,eAAelC,UAAf","sourcesContent":["import React, { Component } from 'react';\r\n//import { FormErrors } from './FormErrors';\r\nimport {\r\n  Container,\r\n  Form,\r\n  Button,\r\n  Col,\r\n  FormControl,\r\n  ButtonToolbar,\r\n} from \"react-bootstrap\";\r\n\r\n const validationRules = {\r\n    required: val => val !== null && val !== undefined && val !== \"\",\r\n    phone: phone => {\r\n      const re = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\r\n      return re.test(String(phone));\r\n    },\r\n    email: email => {\r\n      const re = /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/;\r\n      return re.test(String(email).toLowerCase());\r\n    }\r\n  };\r\nclass Validation extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.formValidationRules = {\r\n        firstName: [\r\n          { rule: validationRules.required, message: \"First name is required\" }\r\n        ],\r\n        lastName: [\r\n          { rule: validationRules.required, message: \"Last name is required\" }\r\n        ],\r\n        phone: [\r\n          { rule: validationRules.phone, message: \"Phone number is invalid\" }\r\n        ],\r\n        email: [\r\n          { rule: validationRules.required, message: \"Email is required\" },\r\n          { rule: validationRules.email, message: \"Email is invalid\" }\r\n        ]\r\n      };\r\n  \r\n      this.fields = [\"firstName\", \"lastName\", \"phone\", \"email\"];\r\n  \r\n      this.state = {\r\n        signupForm: { isValid: false },\r\n        firstName: { value: \"\", isTouched: false, isValid: false, errors: [] },\r\n        lastName: { value: \"\", isTouched: false, isValid: false, errors: [] },\r\n        phone: { value: \"\", isTouched: false, isValid: false, errors: [] },\r\n        email: { value: \"\", isTouched: false, isValid: false, errors: [] }\r\n      };\r\n    }\r\n  \r\n    handleFieldChange = e => {\r\n      let newState = { ...this.state };\r\n      newState[e.target.name].value = e.target.value;\r\n      this.validateForm(newState);\r\n    };\r\n  \r\n    handleSetTouched = e => {\r\n      let field = { ...this.state[e.target.name], isTouched: true };\r\n      this.setState({ [e.target.name]: { ...field } });\r\n    };\r\n  \r\n    getClassName = fieldName => {\r\n      const field = this.state[fieldName];\r\n      return field.isTouched && !field.isValid ? \"has-error\" : \"\";\r\n    };\r\n  \r\n    validateForm = newState => {\r\n      newState = newState || { ...this.state };\r\n      this.fields.forEach(fieldName => {\r\n        let newField = newState[fieldName];\r\n        newField.errors = [];\r\n        newField.isValid = true;\r\n        this.formValidationRules[fieldName].forEach(vRule => {\r\n          if (!vRule.rule(this.state[fieldName].value)) {\r\n            newField.errors.push(vRule.message);\r\n            newField.isValid = false;\r\n          }\r\n          newState[fieldName] = newField;\r\n        });\r\n      });\r\n      this.setState(newState);\r\n    };\r\n  \r\n    componentWillMount() {\r\n      this.validateForm();\r\n    }\r\n    render() {\r\n      const { firstName, lastName, phone, email } = this.state;\r\n      return (\r\n        <Form>\r\n          <div className=\"field-group\">\r\n            <label>บัตรประชาชน</label>\r\n            <input\r\n              className={phone.isTouched && !phone.isValid ? \"has-error\" : \"\"}\r\n              name=\"phone\"\r\n              value={this.state.phone.value}\r\n              onChange={this.handleFieldChange}\r\n              onBlur={this.handleSetTouched}\r\n            />\r\n            {phone.isTouched &&\r\n              phone.errors.length > 0 &&\r\n              phone.errors.map((err, i) => (\r\n                <span key={i} className=\"error-message\">\r\n                  {err}\r\n                </span>\r\n              ))}\r\n          </div>\r\n          <div className=\"field-group\">\r\n            <label>Email</label>\r\n            <input\r\n              className={email.isTouched && !email.isValid ? \"has-error\" : \"\"}\r\n              name=\"email\"\r\n              value={this.state.email.value}\r\n              onChange={this.handleFieldChange}\r\n              onBlur={this.handleSetTouched}\r\n            />\r\n            {email.isTouched &&\r\n              email.errors.length > 0 &&\r\n              email.errors.map((err, i) => (\r\n                <span key={i} className=\"error-message\">\r\n                  {err}\r\n                </span>\r\n              ))}\r\n          </div>\r\n          </Form>\r\n      );\r\n    }\r\n  }\r\n  \r\n // export default FormValidator;\r\nexport default Validation;\r\n\r\n"]},"metadata":{},"sourceType":"module"}